import React from 'react'
import { Card, Descriptions, Button, Space, Tag, Drawer, Table, Steps, Timeline, Progress, Statistic, Row, Col, message } from 'antd'
import { 
  ArrowLeftOutlined, 
  PrinterOutlined, 
  FullscreenOutlined, 
  EditOutlined,
  CheckOutlined,
  ClockCircleOutlined,
  TruckOutlined,
  InboxOutlined,
  SafetyCertificateOutlined,
  WarningOutlined,
  EnvironmentOutlined,
  UserOutlined,
  ShopOutlined,
  FileTextOutlined,
  CalendarOutlined,
  CarOutlined,
  HomeOutlined
} from '@ant-design/icons'
import { useNavigate, useParams } from 'react-router-dom'
import { useQuery } from '@tanstack/react-query'
import { formatMoney, formatDate } from '@/utils'
import { TRACKING_STATUS_CONFIG, LOCATION_TYPE_CONFIG } from '@/constants'
import type { MaterialTracking } from '@/types'

const MaterialTrackingDetailPage: React.FC = () => {
  const navigate = useNavigate()
  const { id } = useParams<{ id: string }>()
  const [isFullscreen, setIsFullscreen] = React.useState(false)

  // Ëé∑ÂèñÁâ©ËµÑËøΩË∏™ËØ¶ÊÉÖÔºàÊ®°ÊãüÔºâ
  const { data: tracking, isLoading } = useQuery({
    queryKey: ['material-tracking-detail', id],
    queryFn: async () => {
      // Ê®°ÊãüÁΩëÁªúÂª∂Ëøü
      await new Promise(resolve => setTimeout(resolve, 500))
      
      // Ê®°ÊãüÁâ©ËµÑËøΩË∏™ËØ¶ÊÉÖÊï∞ÊçÆ
      const mockData: MaterialTracking = {
        id: Number(id),
        trackingNo: 'TK202508200001',
        materialId: 1,
        material: {
          id: 1,
          materialName: 'Èí¢‰∏ùÁª≥',
          materialCode: 'MAT001',
          specification: 'Áõ¥ÂæÑ20mm ÈïøÂ∫¶100m ÊäóÊãâÂº∫Â∫¶1770MPa',
          unit: 'Ê†π'
        } as any,
        purchaseId: 1,
        purchase: {
          id: 1,
          purchaseNo: 'PO202508200001',
          purchaseDate: '2025-08-20',
          supplier: {
            id: 1,
            supplierName: '‰∏≠ËøúÊµ∑ËøêÊ∏ØÂè£ËÆæÂ§áÊúâÈôêÂÖ¨Âè∏',
            supplierCode: 'SUP001'
          } as any
        } as any,
        arrivalId: 1,
        arrival: {
          id: 1,
          arrivalNo: 'AR202508200001',
          arrivalDate: '2025-08-20'
        } as any,
        quantity: 5,
        currentLocation: 'Ê∏ØÂè£‰ªìÂ∫ìAÂå∫',
        currentStatus: 'IN_WAREHOUSE',
        startDate: '2025-08-20',
        expectedEndDate: '2025-08-30',
        actualEndDate: '2025-08-25',
        responsiblePerson: '‰ªìÁÆ°ÂëòÂº†‰∏â',
        contactPhone: '13800138001',
        remarks: 'Áâ©ËµÑÂ∑≤ÂÆâÂÖ®Âà∞ËææÊåáÂÆö‰ΩçÁΩÆÔºåÁä∂ÊÄÅËâØÂ•Ω',
        records: [
          {
            id: 1,
            trackingId: Number(id),
            recordDate: '2025-08-20T08:00:00',
            location: '‰æõÂ∫îÂïÜ‰ªìÂ∫ì',
            locationType: 'SUPPLIER',
            status: 'SHIPPED',
            description: 'Ë¥ßÁâ©‰ªé‰æõÂ∫îÂïÜ‰ªìÂ∫ìÂèëÂá∫',
            operator: '‰æõÂ∫îÂïÜÂèëË¥ßÂëò',
            contactInfo: '021-12345678',
            remarks: 'Ë¥ßÁâ©ÂåÖË£ÖÂÆåÂ•ΩÔºåÂáÜÂ§áËøêËæì',
            createdBy: 1,
            createdTime: '2025-08-20T08:00:00',
            version: 1
          },
          {
            id: 2,
            trackingId: Number(id),
            recordDate: '2025-08-20T12:00:00',
            location: 'ËøêËæìÈÄî‰∏≠',
            locationType: 'TRANSIT',
            status: 'IN_TRANSIT',
            description: 'Ë¥ßÁâ©ËøêËæì‰∏≠ÔºåÈ¢ÑËÆ°‰∏ãÂçàÂà∞Ëææ',
            operator: 'ËøêËæìÂè∏Êú∫ÊùéÂ∏àÂÇÖ',
            contactInfo: '13900139001',
            remarks: 'ËøêËæìËΩ¶ËæÜÔºöÊ≤™A12345ÔºåGPSÂÆö‰ΩçÊ≠£Â∏∏',
            createdBy: 1,
            createdTime: '2025-08-20T12:00:00',
            version: 1
          },
          {
            id: 3,
            trackingId: Number(id),
            recordDate: '2025-08-20T14:00:00',
            location: 'Ê∏ØÂè£Â§ßÈó®',
            locationType: 'PORT_GATE',
            status: 'ARRIVED',
            description: 'Ë¥ßÁâ©Âà∞ËææÊ∏ØÂè£ÔºåÊ≠£Âú®ÂäûÁêÜÂÖ•Ê∏ØÊâãÁª≠',
            operator: 'Èó®Âç´ÁéãÂ∏àÂÇÖ',
            contactInfo: '021-87654321',
            remarks: 'ËΩ¶ËæÜÊ£ÄÊü•ÂÆåÊØïÔºåË¥ßÁâ©ÂÆåÂ•ΩÊó†Êçü',
            createdBy: 1,
            createdTime: '2025-08-20T14:00:00',
            version: 1
          },
          {
            id: 4,
            trackingId: Number(id),
            recordDate: '2025-08-20T15:00:00',
            location: 'Ê∏ØÂè£‰ªìÂ∫ìAÂå∫',
            locationType: 'WAREHOUSE',
            status: 'IN_WAREHOUSE',
            description: 'Ë¥ßÁâ©Â∑≤ÂÖ•Â∫ìÔºåÂÆåÊàêÈ™åÊî∂',
            operator: '‰ªìÁÆ°ÂëòÂº†‰∏â',
            contactInfo: '13800138001',
            remarks: 'Ë¥ßÁâ©Ë¥®ÈáèÊ£ÄÈ™åÂêàÊ†ºÔºåÂ∑≤ÂàÜÈÖçÂ∫ì‰ΩçA-01-001',
            createdBy: 1,
            createdTime: '2025-08-20T15:00:00',
            version: 1
          }
        ],
        createdBy: 1,
        createdTime: '2025-08-20T08:00:00',
        version: 1
      }
      
      return mockData
    },
  })

  // Ëé∑ÂèñËøΩË∏™ËøõÂ∫¶Ê≠•È™§
  const getTrackingSteps = () => {
    const steps = [
      { title: 'Ë¥ßÁâ©ÂèëÂá∫', description: '‰ªé‰æõÂ∫îÂïÜÂèëÂá∫' },
      { title: 'ËøêËæì‰∏≠', description: 'Ë¥ßÁâ©ËøêËæìÈÄî‰∏≠' },
      { title: 'Âà∞ËææÊ∏ØÂè£', description: 'Ë¥ßÁâ©Âà∞ËææÊ∏ØÂè£' },
      { title: 'ÂÖ•Â∫ìÂÆåÊàê', description: 'Ë¥ßÁâ©ÂÖ•Â∫ìÂÆåÊàê' },
    ]

    let current = 0
    let status: 'wait' | 'process' | 'finish' | 'error' = 'process'

    switch (tracking?.currentStatus) {
      case 'SHIPPED':
        current = 0
        break
      case 'IN_TRANSIT':
        current = 1
        break
      case 'ARRIVED':
        current = 2
        break
      case 'IN_WAREHOUSE':
        current = 3
        status = 'finish'
        break
      case 'DELIVERED':
        current = 3
        status = 'finish'
        steps[3] = { title: 'ÈÖçÈÄÅÂÆåÊàê', description: 'Ë¥ßÁâ©ÈÖçÈÄÅÂÆåÊàê' }
        break
      default:
        current = 0
    }

    return { steps, current, status }
  }

  const { steps, current, status } = getTrackingSteps()

  // ÁîüÊàêÊó∂Èó¥Á∫øÊï∞ÊçÆ
  const getTimelineItems = () => {
    if (!tracking?.records) return []

    return tracking.records.map((record) => {
      let color = 'blue'
      let icon = <ClockCircleOutlined />

      switch (record.status) {
        case 'SHIPPED':
          color = 'green'
          icon = <TruckOutlined />
          break
        case 'IN_TRANSIT':
          color = 'blue'
          icon = <CarOutlined />
          break
        case 'ARRIVED':
          color = 'orange'
          icon = <EnvironmentOutlined />
          break
        case 'IN_WAREHOUSE':
          color = 'green'
          icon = <InboxOutlined />
          break
        case 'DELIVERED':
          color = 'green'
          icon = <CheckOutlined />
          break
        default:
          color = 'gray'
      }

      return {
        color,
        dot: icon,
        children: (
          <div>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 8 }}>
              <strong>{record.description}</strong>
              <span style={{ fontSize: '12px', color: '#999' }}>
                {formatDate(record.recordDate, 'MM-DD HH:mm')}
              </span>
            </div>
            <p>
              <EnvironmentOutlined style={{ marginRight: 4 }} />
              ‰ΩçÁΩÆÔºö{record.location}
            </p>
            <p>
              <UserOutlined style={{ marginRight: 4 }} />
              Êìç‰Ωú‰∫∫Ôºö{record.operator}
            </p>
            {record.contactInfo && (
              <p>
                <span style={{ marginRight: 4 }}>üìû</span>
                ËÅîÁ≥ªÊñπÂºèÔºö{record.contactInfo}
              </p>
            )}
            {record.remarks && (
              <p style={{ color: '#666', fontSize: '12px' }}>
                Â§áÊ≥®Ôºö{record.remarks}
              </p>
            )}
          </div>
        ),
      }
    })
  }

  // ËøΩË∏™ËÆ∞ÂΩïË°®Ê†ºÂàó
  const recordColumns = [
    {
      title: 'ËÆ∞ÂΩïÊó∂Èó¥',
      dataIndex: 'recordDate',
      key: 'recordDate',
      width: 150,
      render: (value: string) => formatDate(value, 'MM-DD HH:mm'),
    },
    {
      title: '‰ΩçÁΩÆ',
      dataIndex: 'location',
      key: 'location',
      width: 150,
    },
    {
      title: '‰ΩçÁΩÆÁ±ªÂûã',
      dataIndex: 'locationType',
      key: 'locationType',
      width: 120,
      render: (value: string) => {
        const config = LOCATION_TYPE_CONFIG[value as keyof typeof LOCATION_TYPE_CONFIG]
        return config ? (
          <Tag color={config.color}>
            {config.text}
          </Tag>
        ) : value
      },
    },
    {
      title: 'Áä∂ÊÄÅ',
      dataIndex: 'status',
      key: 'status',
      width: 120,
      render: (value: string) => {
        const config = TRACKING_STATUS_CONFIG[value as keyof typeof TRACKING_STATUS_CONFIG]
        return config ? (
          <Tag color={config.color}>
            {config.text}
          </Tag>
        ) : value
      },
    },
    {
      title: 'ÊèèËø∞',
      dataIndex: 'description',
      key: 'description',
      width: 200,
      ellipsis: true,
    },
    {
      title: 'Êìç‰Ωú‰∫∫',
      dataIndex: 'operator',
      key: 'operator',
      width: 120,
    },
    {
      title: 'ËÅîÁ≥ªÊñπÂºè',
      dataIndex: 'contactInfo',
      key: 'contactInfo',
      width: 120,
    },
    {
      title: 'Â§áÊ≥®',
      dataIndex: 'remarks',
      key: 'remarks',
      ellipsis: true,
    },
  ]

  const DetailContent = () => (
    <div style={{ padding: isFullscreen ? 24 : 0 }}>
      {/* ËøΩË∏™ËøõÂ∫¶ */}
      <Card 
        title="Áâ©ÊµÅËøõÂ∫¶" 
        style={{ marginBottom: 16 }}
        size={isFullscreen ? 'default' : 'small'}
      >
        <Steps current={current} status={status} items={steps} />
      </Card>

      {/* ËøΩË∏™Ê¶ÇËßà */}
      <Card 
        title="ËøΩË∏™Ê¶ÇËßà" 
        style={{ marginBottom: 16 }}
        size={isFullscreen ? 'default' : 'small'}
      >
        <Row gutter={16}>
          <Col span={6}>
            <Statistic
              title="ËøΩË∏™Êï∞Èáè"
              value={tracking?.quantity || 0}
              valueStyle={{ color: '#1890ff' }}
              prefix={<InboxOutlined />}
              suffix={tracking?.material?.unit}
            />
          </Col>
          <Col span={6}>
            <Statistic
              title="ËøΩË∏™Â§©Êï∞"
              value={tracking?.startDate && tracking?.actualEndDate ? 
                Math.ceil((new Date(tracking.actualEndDate).getTime() - new Date(tracking.startDate).getTime()) / (1000 * 60 * 60 * 24)) : 
                tracking?.startDate ? 
                Math.ceil((new Date().getTime() - new Date(tracking.startDate).getTime()) / (1000 * 60 * 60 * 24)) : 0
              }
              valueStyle={{ color: '#52c41a' }}
              prefix={<CalendarOutlined />}
              suffix="Â§©"
            />
          </Col>
          <Col span={6}>
            <Statistic
              title="ËÆ∞ÂΩïÊï∞Èáè"
              value={tracking?.records?.length || 0}
              valueStyle={{ color: '#faad14' }}
              prefix={<FileTextOutlined />}
              suffix="Êù°"
            />
          </Col>
          <Col span={6}>
            <div style={{ textAlign: 'center' }}>
              <div style={{ fontSize: '14px', color: '#666', marginBottom: 8 }}>ÂÆåÊàêËøõÂ∫¶</div>
              <Progress
                type="circle"
                size={80}
                percent={tracking?.currentStatus === 'IN_WAREHOUSE' || tracking?.currentStatus === 'DELIVERED' ? 100 :
                        tracking?.currentStatus === 'ARRIVED' ? 75 :
                        tracking?.currentStatus === 'IN_TRANSIT' ? 50 :
                        tracking?.currentStatus === 'SHIPPED' ? 25 : 0}
                strokeColor={tracking?.currentStatus === 'IN_WAREHOUSE' || tracking?.currentStatus === 'DELIVERED' ? '#52c41a' : '#1890ff'}
              />
            </div>
          </Col>
        </Row>
      </Card>

      {/* ËøΩË∏™Âü∫Êú¨‰ø°ÊÅØ */}
      <Card 
        title="ËøΩË∏™Âü∫Êú¨‰ø°ÊÅØ" 
        style={{ marginBottom: 16 }}
        size={isFullscreen ? 'default' : 'small'}
      >
        <Descriptions 
          column={isFullscreen ? 3 : 2} 
          size={isFullscreen ? 'default' : 'small'}
        >
          <Descriptions.Item label="ËøΩË∏™ÂçïÂè∑">
            {tracking?.trackingNo}
          </Descriptions.Item>
          <Descriptions.Item label="ÂΩìÂâçÁä∂ÊÄÅ">
            {tracking && (
              <Tag color={TRACKING_STATUS_CONFIG[tracking.currentStatus as keyof typeof TRACKING_STATUS_CONFIG]?.color}>
                {TRACKING_STATUS_CONFIG[tracking.currentStatus as keyof typeof TRACKING_STATUS_CONFIG]?.text}
              </Tag>
            )}
          </Descriptions.Item>
          <Descriptions.Item label="ÂΩìÂâç‰ΩçÁΩÆ">
            <Space>
              <EnvironmentOutlined />
              {tracking?.currentLocation}
            </Space>
          </Descriptions.Item>
          <Descriptions.Item label="ÂºÄÂßãÊó•Êúü">
            {tracking?.startDate && formatDate(tracking.startDate)}
          </Descriptions.Item>
          <Descriptions.Item label="È¢ÑËÆ°ÂÆåÊàê">
            {tracking?.expectedEndDate && formatDate(tracking.expectedEndDate)}
          </Descriptions.Item>
          <Descriptions.Item label="ÂÆûÈôÖÂÆåÊàê">
            {tracking?.actualEndDate ? formatDate(tracking.actualEndDate) : '-'}
          </Descriptions.Item>
          <Descriptions.Item label="Ë¥üË¥£‰∫∫">
            <Space>
              <UserOutlined />
              {tracking?.responsiblePerson}
            </Space>
          </Descriptions.Item>
          <Descriptions.Item label="ËÅîÁ≥ªÁîµËØù">
            {tracking?.contactPhone}
          </Descriptions.Item>
          <Descriptions.Item label="ËøΩË∏™Êï∞Èáè">
            {tracking?.quantity} {tracking?.material?.unit}
          </Descriptions.Item>
          <Descriptions.Item label="ËøΩË∏™Â§áÊ≥®" span={isFullscreen ? 3 : 2}>
            {tracking?.remarks}
          </Descriptions.Item>
        </Descriptions>
      </Card>

      {/* Áâ©Êñô‰ø°ÊÅØ */}
      <Card 
        title="Áâ©Êñô‰ø°ÊÅØ" 
        style={{ marginBottom: 16 }}
        size={isFullscreen ? 'default' : 'small'}
      >
        <Descriptions 
          column={isFullscreen ? 3 : 2} 
          size={isFullscreen ? 'default' : 'small'}
        >
          <Descriptions.Item label="Áâ©ÊñôÁºñÁ†Å">
            {tracking?.material?.materialCode}
          </Descriptions.Item>
          <Descriptions.Item label="Áâ©ÊñôÂêçÁß∞">
            {tracking?.material?.materialName}
          </Descriptions.Item>
          <Descriptions.Item label="ËßÑÊ†ºÂûãÂè∑">
            {tracking?.material?.specification}
          </Descriptions.Item>
          <Descriptions.Item label="ËÆ°ÈáèÂçï‰Ωç">
            {tracking?.material?.unit}
          </Descriptions.Item>
          <Descriptions.Item label="ÈááË¥≠ÂçïÂè∑">
            {tracking?.purchase?.purchaseNo}
          </Descriptions.Item>
          <Descriptions.Item label="Âà∞Ë¥ßÂçïÂè∑">
            {tracking?.arrival?.arrivalNo}
          </Descriptions.Item>
        </Descriptions>
      </Card>

      {/* ‰æõÂ∫îÂïÜ‰ø°ÊÅØ */}
      <Card 
        title={
          <Space>
            <ShopOutlined />
            ‰æõÂ∫îÂïÜ‰ø°ÊÅØ
          </Space>
        } 
        style={{ marginBottom: 16 }}
        size={isFullscreen ? 'default' : 'small'}
      >
        <Descriptions 
          column={isFullscreen ? 3 : 2} 
          size={isFullscreen ? 'default' : 'small'}
        >
          <Descriptions.Item label="‰æõÂ∫îÂïÜÁºñÂè∑">
            {tracking?.purchase?.supplier?.supplierCode}
          </Descriptions.Item>
          <Descriptions.Item label="‰æõÂ∫îÂïÜÂêçÁß∞">
            {tracking?.purchase?.supplier?.supplierName}
          </Descriptions.Item>
          <Descriptions.Item label="ÈááË¥≠Êó•Êúü">
            {tracking?.purchase?.purchaseDate && formatDate(tracking.purchase.purchaseDate)}
          </Descriptions.Item>
          <Descriptions.Item label="Âà∞Ë¥ßÊó•Êúü">
            {tracking?.arrival?.arrivalDate && formatDate(tracking.arrival.arrivalDate)}
          </Descriptions.Item>
        </Descriptions>
      </Card>

      {/* ËøΩË∏™ËÆ∞ÂΩï */}
      <Card 
        title="ËøΩË∏™ËÆ∞ÂΩï" 
        style={{ marginBottom: 16 }}
        size={isFullscreen ? 'default' : 'small'}
      >
        <Table
          columns={recordColumns}
          dataSource={tracking?.records || []}
          rowKey="id"
          pagination={false}
          size="small"
          scroll={{ x: 1200 }}
        />
      </Card>

      {/* ËøΩË∏™Êó∂Èó¥Á∫ø */}
      <Card 
        title="ËøΩË∏™Êó∂Èó¥Á∫ø" 
        size={isFullscreen ? 'default' : 'small'}
      >
        <Timeline items={getTimelineItems()} />
      </Card>
    </div>
  )

  return (
    <>
      <div className="page-container">
        <Card
          title={
            <Space>
              <Button
                type="text"
                icon={<ArrowLeftOutlined />}
                onClick={() => navigate('/cargo/material-tracking')}
              >
                ËøîÂõû
              </Button>
              Áâ©ËµÑËøΩË∏™ËØ¶ÊÉÖ
            </Space>
          }
          loading={isLoading}
          extra={
            <Space>
              {tracking?.currentStatus !== 'DELIVERED' && (
                <Button 
                  icon={<EditOutlined />}
                  onClick={() => navigate(`/cargo/material-tracking/edit/${id}`)}
                >
                  ÁºñËæë
                </Button>
              )}
              <Button 
                icon={<PrinterOutlined />}
                onClick={() => window.print()}
              >
                ÊâìÂç∞
              </Button>
              <Button 
                icon={<FullscreenOutlined />}
                onClick={() => setIsFullscreen(true)}
              >
                ÂÖ®Â±èÊü•Áúã
              </Button>
            </Space>
          }
        >
          <DetailContent />
        </Card>
      </div>

      {/* ÂÖ®Â±èÊäΩÂ±â */}
      <Drawer
        title="Áâ©ËµÑËøΩË∏™ËØ¶ÊÉÖ"
        placement="right"
        size="large"
        open={isFullscreen}
        onClose={() => setIsFullscreen(false)}
        extra={
          <Space>
            <Button 
              icon={<PrinterOutlined />}
              onClick={() => window.print()}
            >
              ÊâìÂç∞
            </Button>
            <Button 
              type="primary"
              onClick={() => setIsFullscreen(false)}
            >
              Á°ÆÂÆö
            </Button>
          </Space>
        }
        styles={{
          body: { padding: 0 }
        }}
      >
        <DetailContent />
      </Drawer>
    </>
  )
}

export default MaterialTrackingDetailPage
